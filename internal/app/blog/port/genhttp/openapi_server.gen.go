//go:build go1.22

// Package genhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package genhttp

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all blog posts
	// (GET /posts)
	ListPosts(w http.ResponseWriter, r *http.Request)
	// Create a new blog post
	// (POST /posts)
	CreatePost(w http.ResponseWriter, r *http.Request)
	// Delete a blog post
	// (DELETE /posts/{id})
	DeletePost(w http.ResponseWriter, r *http.Request, id int)
	// Get blog post details by ID
	// (GET /posts/{id})
	GetPostById(w http.ResponseWriter, r *http.Request, id int)
	// Update a blog post
	// (PUT /posts/{id})
	UpdatePost(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListPosts operation middleware
func (siw *ServerInterfaceWrapper) ListPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPosts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPostById operation middleware
func (siw *ServerInterfaceWrapper) GetPostById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/posts", wrapper.ListPosts)
	m.HandleFunc("POST "+options.BaseURL+"/posts", wrapper.CreatePost)
	m.HandleFunc("DELETE "+options.BaseURL+"/posts/{id}", wrapper.DeletePost)
	m.HandleFunc("GET "+options.BaseURL+"/posts/{id}", wrapper.GetPostById)
	m.HandleFunc("PUT "+options.BaseURL+"/posts/{id}", wrapper.UpdatePost)

	return m
}

type ListPostsRequestObject struct {
}

type ListPostsResponseObject interface {
	VisitListPostsResponse(w http.ResponseWriter) error
}

type ListPosts200JSONResponse []Post

func (response ListPosts200JSONResponse) VisitListPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePostRequestObject struct {
	Body *CreatePostJSONRequestBody
}

type CreatePostResponseObject interface {
	VisitCreatePostResponse(w http.ResponseWriter) error
}

type CreatePost201Response struct {
}

func (response CreatePost201Response) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreatePost400Response struct {
}

func (response CreatePost400Response) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreatePost401Response struct {
}

func (response CreatePost401Response) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreatePost500Response struct {
}

func (response CreatePost500Response) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeletePostRequestObject struct {
	Id int `json:"id"`
}

type DeletePostResponseObject interface {
	VisitDeletePostResponse(w http.ResponseWriter) error
}

type DeletePost204Response struct {
}

func (response DeletePost204Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePost404Response struct {
}

func (response DeletePost404Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPostByIdRequestObject struct {
	Id int `json:"id"`
}

type GetPostByIdResponseObject interface {
	VisitGetPostByIdResponse(w http.ResponseWriter) error
}

type GetPostById200JSONResponse Post

func (response GetPostById200JSONResponse) VisitGetPostByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostById404Response struct {
}

func (response GetPostById404Response) VisitGetPostByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePostRequestObject struct {
	Id   int `json:"id"`
	Body *UpdatePostJSONRequestBody
}

type UpdatePostResponseObject interface {
	VisitUpdatePostResponse(w http.ResponseWriter) error
}

type UpdatePost200Response struct {
}

func (response UpdatePost200Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdatePost400Response struct {
}

func (response UpdatePost400Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePost401Response struct {
}

func (response UpdatePost401Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdatePost404Response struct {
}

func (response UpdatePost404Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all blog posts
	// (GET /posts)
	ListPosts(ctx context.Context, request ListPostsRequestObject) (ListPostsResponseObject, error)
	// Create a new blog post
	// (POST /posts)
	CreatePost(ctx context.Context, request CreatePostRequestObject) (CreatePostResponseObject, error)
	// Delete a blog post
	// (DELETE /posts/{id})
	DeletePost(ctx context.Context, request DeletePostRequestObject) (DeletePostResponseObject, error)
	// Get blog post details by ID
	// (GET /posts/{id})
	GetPostById(ctx context.Context, request GetPostByIdRequestObject) (GetPostByIdResponseObject, error)
	// Update a blog post
	// (PUT /posts/{id})
	UpdatePost(ctx context.Context, request UpdatePostRequestObject) (UpdatePostResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListPosts operation middleware
func (sh *strictHandler) ListPosts(w http.ResponseWriter, r *http.Request) {
	var request ListPostsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPosts(ctx, request.(ListPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPosts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPostsResponseObject); ok {
		if err := validResponse.VisitListPostsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePost operation middleware
func (sh *strictHandler) CreatePost(w http.ResponseWriter, r *http.Request) {
	var request CreatePostRequestObject

	var body CreatePostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePost(ctx, request.(CreatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePostResponseObject); ok {
		if err := validResponse.VisitCreatePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePost operation middleware
func (sh *strictHandler) DeletePost(w http.ResponseWriter, r *http.Request, id int) {
	var request DeletePostRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePost(ctx, request.(DeletePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePostResponseObject); ok {
		if err := validResponse.VisitDeletePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostById operation middleware
func (sh *strictHandler) GetPostById(w http.ResponseWriter, r *http.Request, id int) {
	var request GetPostByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostById(ctx, request.(GetPostByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostByIdResponseObject); ok {
		if err := validResponse.VisitGetPostByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePost operation middleware
func (sh *strictHandler) UpdatePost(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdatePostRequestObject

	request.Id = id

	var body UpdatePostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePost(ctx, request.(UpdatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePostResponseObject); ok {
		if err := validResponse.VisitUpdatePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
